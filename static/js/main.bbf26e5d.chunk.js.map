{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","App","useEffect","fetch","method","headers","body","JSON","stringify","query","then","response","console","log","classes","React","useState","setValue","data","name","uv","pv","amt","className","AppBar","position","Tabs","onChange","event","newValue","aria-label","Tab","label","width","height","type","dataKey","stroke","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbf26e5d.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport {AppBar, makeStyles, Tab, Tabs, Theme, Typography, Box} from \"@material-ui/core\";\nimport { LineChart, Line } from 'recharts';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props : TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n};\n\nconst a11yProps = (index: any) =>{\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nconst App: React.FC = () => {\n    useEffect(()=> {\n        fetch(' http://127.0.0.1:8000/graphql/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': 'http://localhost:3000/'\n            },\n            body: JSON.stringify({\n                // query: `query { skumetrics { facings } }`,\n                query: `{ \"query\" \"{ skuMetrics { facings } }\" }`,\n            }),\n        })\n            .then((response)=>{\n                console.log(response);\n            })\n        }\n    );\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const data = [{name: 'Page A', uv: 400, pv: 2400, amt: 2400},{name: 'Page B', uv: 300, pv: 2400, amt: 2400},\n        {name: 'Page B', uv: 500, pv: 2400, amt: 2400},{name: 'Page C', uv: 600, pv: 2400, amt: 2400},\n        {name: 'Page D', uv: 700, pv: 2400, amt: 2400}];\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"Facings\" {...a11yProps(0)} />\n                    <Tab label=\"Availability\" {...a11yProps(1)} />\n                    <Tab label=\"Shelf Position\" {...a11yProps(2)} />\n                    <Tab label=\"Price\" {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                Facing\n                <LineChart width={400} height={400} data={data}>\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                </LineChart>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                Availability\n                <LineChart width={400} height={400} data={data}>\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                </LineChart>\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                Shelf Position\n                <LineChart width={400} height={400} data={data}>\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                </LineChart>\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                Price\n                <LineChart width={400} height={400} data={data}>\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                </LineChart>\n            </TabPanel>\n        </div>\n    );\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}